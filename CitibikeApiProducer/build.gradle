import groovy.json.JsonSlurper
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
    }
}


plugins {
    id 'com.avast.gradle.docker-compose' version '0.7.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

bootJar {
    version = '0.1.0'
    archiveName = "tw-citibike-apis-producer" + version + '.jar'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile 'org.springframework.kafka:spring-kafka:2.1.5.RELEASE'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
    implementation 'junit:junit:4.12'
}


tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
        }
    }
}

jacocoTestReport {
    finalizedBy jacocoTestCoverageVerification
}

test {
    finalizedBy jacocoTestReport
}

task teste2e(type: Test) {
    description "Runs e2e test"
//    finalizedBy(composeDown)
}


teste2e.doFirst {
    while(1) {
        try {
//            call_api("http://localhost:8090/admin/rest_api/api?api=unpause&dag_id=e2e")
//            def resp_trigger  = call_api("http://localhost:8090/admin/rest_api/api?api=trigger_dag&dag_id=e2e")
//            System.out.println("Get resp, breaking off")
//            break;
        } catch (Exception ex) {
            Thread.sleep(1000)
            System.out.println("Test Test")
        }
    }
}

def call_api(String url) {
    def req = new URL(url).openConnection()
    System.out.println("Status code: ${req.getResponseCode()}")
    def resp = new JsonSlurper().parseText(req.getInputStream().getText())
    System.out.println("Response: ${resp}")
    return resp

}

dockerCompose {
    isRequiredBy(project.tasks.teste2e)
    useComposeFiles = ['../docker/docker-compose-e2e.yml']
    waitForTcpPorts = false
    forceRecreate = true
    buildBeforeUp = true
}